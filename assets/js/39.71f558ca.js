(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{438:function(t,r,o){"use strict";o.r(r);var v=o(42),_=Object(v.a)({},(function(){var t=this,r=t.$createElement,o=t._self._c||r;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"通用格式"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#通用格式"}},[t._v("#")]),t._v(" 通用格式")]),t._v(" "),o("p",[t._v("< command > [< subcommand > [< subcommand >...]] < action > [-options [ optionvalue ]] [argument [ argument...]]")]),t._v(" "),o("h1",{attrs:{id:"打印"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#打印"}},[t._v("#")]),t._v(" 打印")]),t._v(" "),o("p",[o("strong",[t._v("print")]),t._v("、"),o("strong",[t._v("p")]),t._v("：打印；"),o("strong",[t._v("p")]),t._v(" 是 "),o("strong",[t._v("expr-")]),t._v(" 的缩写"),o("br"),t._v(" "),o("strong",[t._v("po")]),t._v("：如果接收到的参数是一个指针，会调用对象的 description 方法并打印，如果接收到的参数时一个 core foundation 对象，那么他会调用 CFShow 方法并打印；如果这两个方法都调用失败，那么 "),o("strong",[t._v("po")]),t._v(" 和 "),o("strong",[t._v("p")]),t._v(" 的打印内容相同；"),o("strong",[t._v("po")]),t._v("是 "),o("strong",[t._v("expr -o-")]),t._v(" 的缩写")]),t._v(" "),o("h1",{attrs:{id:"内存"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#内存"}},[t._v("#")]),t._v(" 内存")]),t._v(" "),o("p",[o("font",{attrs:{color:"#000000"}},[o("strong",[t._v("读取内存：")])]),o("br"),t._v("\nmemory read/[数量][格式][字节数] <内存地址>"),o("br"),t._v("\nx/[数量][格式][字节数] <内存地址>"),o("br"),t._v("\n例：x/3xw 0x10010")],1),t._v(" "),o("p",[o("font",{attrs:{color:"#000000"}},[o("strong",[t._v("修改内存：")])]),o("br"),t._v("\nmemory write <内存地址> <数值>"),o("br"),t._v("\n例：memory write 0x10010 10")],1),t._v(" "),o("p",[o("font",{attrs:{color:"#000000"}},[o("strong",[t._v("格式：")])]),o("br"),t._v(" "),o("strong",[t._v("x")]),t._v("是 16 进制"),o("br"),t._v(" "),o("strong",[t._v("f")]),t._v("是浮点"),o("br"),t._v(" "),o("strong",[t._v("d")]),t._v("是 10 进制")],1),t._v(" "),o("p",[o("font",{attrs:{color:"#000000"}},[o("strong",[t._v("字节数：")])]),o("br"),t._v(" "),o("strong",[t._v("b：")]),t._v(" byte，1 字节"),o("br"),t._v(" "),o("strong",[t._v("h：")]),t._v(" half word，2 字节"),o("br"),t._v(" "),o("strong",[t._v("w：")]),t._v(" word，4 字节"),o("br"),t._v(" "),o("strong",[t._v("g：")]),t._v(" giant word，8 字节")],1),t._v(" "),o("h1",{attrs:{id:"断点"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#断点"}},[t._v("#")]),t._v(" 断点")]),t._v(" "),o("p",[t._v("breakpoint set -a 函数地址"),o("br"),t._v("\nbreakpoint set -n 函数名")]),t._v(" "),o("div",{staticClass:"custom-block warning"},[o("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),o("p",[t._v("C 函数打断点：breakpoint set -n test"),o("br"),t._v('\nOC 函数打断点：breakpoint set -n "[ViewController touchesBegan:withEvent:]”')])])])}),[],!1,null,null,null);r.default=_.exports}}]);